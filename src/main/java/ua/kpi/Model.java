package ua.kpi;import java.util.Arrays;import java.util.HashMap;import java.util.Map;import java.util.Random;/** * Created by Evgeniy on 11/2/2016. * Demonstrates program logic of working with arrays */public class Model {    /**     * Constants of min and max value of elements in array     */    public static final int MIN = -100;    public static final int MAX = 100;    /**     * Calculate the sum of all elements in array     * @param array of integers     * @return sum of elements     */    public int findSum(int array[]){        int sum = 0;        for (int element : array){            sum += element;        }        return sum;    }    /**     * Find index and value of max element in array     * @param array     * @return index     */    public int findMax(int array[]){        int max = array[0];        int index = 0;        for (int i = 0; i < array.length; i++) {            if (array[i] > max){                max = array[i];                index = i;            }        }        return max;    }    /**     * Find index and value of min element in array     * @param array     * @return index     */    public int findMin(int array[]){        int min = array[0];        int index = 0;        for (int i = 0; i < array.length; i++) {            if (array[i] < min){                min = array[i];                index = i;            }        }        return index;    }    /**     * Find average value of array's elements     * @param array     * @return average value     */    public  double averageValue(int array[]){        return (double)findSum(array) / array.length;    }    /**     * Find quantity of elements equal to given     * @param value     * @param array     * @return quantity     */    public int quantityElementsEqualToGiven(double value, int array[]){        int quantity = 0;        for (int element : array){            if (element == value){                quantity++;            }        }        return quantity;    }    /**     * Find quantity of elements equal to zero     * @param array     * @return quantity     */    public int quantityElemsEqualToZero(int array[]){        int quantity = 0;        for (int i = 0; i < array.length; i++) {            if (array[i] == 0){                quantity++;            }        }        return quantity;    }    /**     * Find quantity of elements greater than zero     * @param array     * @return quantity     */    public int quantityOfPositiveElements(int array[]){        int quantity = 0;        for (int i = 0; i < array.length; i++) {            if (array[i] > 0){                quantity++;            }        }        return quantity;    }    /**     * Multiply elements of array by given value     * @param array     * @param value     * @return resultArray     */    public int[] multiplyArrayByValue(int array[], int value){        int resultArray[] = new int[array.length];        for (int i = 0; i < array.length; i++) {            resultArray[i] = array[i] * value;        }        return resultArray;    }    /**     * Add elements of array to their index     * @param array     * @return resultArray     */    public int[] addElemsWithIndexes(int array[]){        int resultArray[] = new int[array.length];        for (int i = 0; i < array.length; i++) {            resultArray[i] = array[i] + i;        }        return resultArray;    }    /**     * Set even elements of array to zero     * @param array     * @return resultArray     */    public int[] setToZeroEvenElems(int array[]){        int resultArray[] = Arrays.copyOf(array, array.length);        for (int i = 0; i < array.length; i++) {            if (resultArray[i] % 2 == 0){                resultArray[i] = 0;            }        }        return resultArray;    }    /**     * Set to zero elements with odd index     * @param array     * @return resultArray     */    public int[] setToZeroElemsWithOddIndex(int array[]){        int resultArray[] = Arrays.copyOf(array, array.length);        for (int i = 0; i < array.length; i++) {            if (i % 2 != 0){                resultArray[i] = 0;            }        }        return resultArray;    }    /**     * Find first positive element of array     * @param array     * @return resultArray     */    public int firstPositiveElem(int array[]){        int element = 0;        for (int i = 0; i < array.length; i++) {            if (array[i] > 0){                element = array[i];                break;            }        }        return element;    }    /**     * Find last negative element     * @param array     * @return element     */    public int lastNegativeElem(int array[]){        int element = 0;        for (int i = array.length - 1; i > 0; i--){            if (array[i] < 0){                element = array[i];                break;            }        }        return element;    }    /**     * Count quantity of elements equals to given     * @param array     * @param value     * @return quantuty     */    public int elemsEqualToGiven(int array[], int value){        int quantity = 0;        for (int i = 0; i < array.length; i++) {            if (array[i] == value){                quantity++;            }        }        return quantity;    }    /**     * Find indexes of occurrence of given element     * @param array     * @param value     * @return result string     */    public StringBuffer occurrenceIndexes(int array[], int value){        StringBuffer result = new StringBuffer("");        int counter = 0;        for (int i = 0; i < array.length; i++) {            if (array[i] == value){                result.append(i + " ");                counter++;            }        }        if (counter == 0){            return null;        } else return result;    }    /**     * Check the array by natural ordering     */    public boolean checkAscendingOrder(int array[]){        for (int i = 0; i < array.length; i++) {            if (array[i] < array[i + 1]){                return true;            }        }        return false;    }    /**     * Check the array by reverse ordering     */    public boolean checkDescendingOrder(int array[]){        for (int i = 0; i < array.length; i++) {            if (array[i] > array[i + 1]){                return true;            }        }        return false;    }    /**     * Ensures the circular right shift of elements by k positions     * @param array     * @param value     * @return result array     */    public int[] moveElemsByPositions(int array[], int value){        int size = array.length;        int result[] = new int[size];        for (int i = 0; i < size - value; i++) {            result[i + value] = array[i];        }        for (int i = value - 1; i >= 0; i--) {            result[i] = array[size - 1];            size--;        }        return result;    }    /**     * Finds elements which have one or more equal elements     * @param array of integers     * @return Map with elements that have duplicates     */    public Map findEqualElements(int array[]){        Map equalElements = new HashMap<>();        for (int i = 0; i < array.length; i++) {            for (int j = i + 1; j < array.length; j++) {                if (array[i] == array[j]){                    equalElements.put(i, array[i]);//                    equalElements.put(j, array[j]);                }            }        }        return equalElements;    }    /**     * Find quantity of elements that greater than average value of elements     * @param array     * @return quantity     */    public int amountGreaterThanAverage(int array[]){        int quantity = 0;        double average = averageValue(array);        for (int i = 0; i < array.length; i++) {            if (array[i] > average){                quantity++;            }        }        return quantity;    }    /**     * Find unique elements in array     * @param array of integers     * @return map with elements     */    public Map findUniqueElements(int array[]){        Map uniqueElements = new HashMap<Integer, Integer>();        boolean unique = true;        for (int i = 0; i < array.length; i++) {            unique = true;            for (int j = 0; j < array.length; j++) {                if (array[i] == array[j] && (i != j)){                    unique = false;                    break;                }            }            if (unique){                uniqueElements.put(i, array[i]);            }        }        return uniqueElements;    }    /**     * Quantity of elements equal to first     * @param array     * @return quantity     */    public int equalToFirst(int array[]){        int quantity = 0;        int first = array[0];        for (int value : array){            if (value == first){                quantity++;            }        }        return quantity;    }    /**     * Fill the array with randomly generated values in range min and max     * @param min     * @param max     * @param size     * @return filled array     */    public int[] fillRandomArray(int min, int max, int size){        int [] array = new int[size];        Random random = new Random();        for (int i = 0; i < array.length; i++) {            array[i] = random.nextInt(max - min + 1) + min;        }        return array;    }}